name: AI News Daily Digest

on:
  # Schedule for 10 AM Omaha time (Central Time)
  # 15:00 UTC = 10:00 AM CDT (Daylight Time - March to November)
  # 16:00 UTC = 10:00 AM CST (Standard Time - November to March)
  # Using 15:00 UTC to cover most of the year (daylight time)
  schedule:
    - cron: '0 15 * * *'  # Daily at 3 PM UTC (10 AM CDT)
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode'
        required: false
        default: 'false'
        type: boolean

jobs:
  send-digest:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip jq
        
        # Install Chrome for Testing (includes matched ChromeDriver)
        # Get the latest stable Chrome version
        CHROME_VERSION=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json | jq -r '.channels.Stable.version')
        
        # Download and install Chrome for Testing
        wget -O chrome-linux64.zip "https://storage.googleapis.com/chrome-for-testing-public/${CHROME_VERSION}/linux64/chrome-linux64.zip"
        unzip chrome-linux64.zip
        sudo mv chrome-linux64 /opt/chrome
        sudo ln -sf /opt/chrome/chrome /usr/local/bin/google-chrome
        
        # Download and install ChromeDriver for Testing
        wget -O chromedriver-linux64.zip "https://storage.googleapis.com/chrome-for-testing-public/${CHROME_VERSION}/linux64/chromedriver-linux64.zip"
        unzip chromedriver-linux64.zip
        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        
        # Cleanup
        rm -f chrome-linux64.zip chromedriver-linux64.zip
        rm -rf chromedriver-linux64
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Verify setup
      run: |
        python test_setup.py
        
    - name: Check configuration
      env:
        EMAIL_PROVIDER: ${{ secrets.EMAIL_PROVIDER }}
        RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
      run: |
        echo "üîç Configuration Check:"
        echo "  Email Provider: ${EMAIL_PROVIDER:-google}"
        echo "  Resend API: ${RESEND_API_KEY:+‚úÖ Available}"
        echo "  Email User: ${EMAIL_USER:+‚úÖ Available}"
        echo "  Reddit API: ${REDDIT_CLIENT_ID:+‚úÖ Available}"
        echo "‚ÑπÔ∏è Reddit API is optional - system will use intelligent search if not available"
        python check_secrets.py || echo "‚ö†Ô∏è Some secrets missing but system will continue"
        
    - name: Run AI News Digest
      env:
        EMAIL_PROVIDER: ${{ secrets.EMAIL_PROVIDER }}
        RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
      run: |
        if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
          echo "Running in test mode..."
          python main.py test
        else
          echo "Running normal digest..."
          python main.py
        fi
        
    - name: Upload logs as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ai-news-logs-${{ github.run_number }}
        path: |
          ai_news_crawler.log
          ai_news_crawler.db
        retention-days: 7 